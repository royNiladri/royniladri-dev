{"version":3,"sources":["components/contact/Contact.tsx","components/Banner/Banner.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Contact","className","href","icon","library","add","fab","far","fas","Banner","props","text","interval","state","textToDisplay","i","j","reverse","halt","this","setInterval","nowText","setState","substr","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAmCeA,MA/Bf,WACI,OACI,qBAAKC,UAAU,UAAf,SAEI,sBAAKA,UAAU,gBAAf,UACI,mBAAGC,KAAK,2CAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,gBAEnC,mBAAGD,KAAK,iCAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,cAEnC,mBAAGD,KAAK,2CAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,iBAEnC,mBAAGD,KAAK,qCAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,eAEnC,mBAAGD,KAAK,iCAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,gBAEnC,mBAAGD,KAAK,+BAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,eAEnC,mBAAGD,KAAK,sCAAR,SACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,oBCnBnDC,IAAQC,IAAIC,IAAKC,IAAKC,K,IAmFPC,E,kDAtEb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IALRC,KAAO,CAAC,YAAa,UAAW,eAAgB,UAIxB,EAFxBC,cAEwB,EAEtB,EAAKC,MAAQ,CAAEC,cAAe,IAFR,E,iEAKF,IAAD,OACfC,EAAI,EACJC,EAAI,EACJC,GAAU,EACVC,EAAO,EACXC,KAAKP,SAAWQ,aAAY,WAC1B,IAAIC,EAAU,EAAKV,KAAKI,GACxB,EAAKO,SAAS,CAAER,cAAeO,EAAQE,OAAO,EAAGP,KAE7CA,IAAMK,EAAQG,QAAUN,KAAS,IAGjCF,IAAMK,EAAQG,SAChBP,GAAU,EACVC,EAAO,IAETF,GAAKC,GAAW,EAAI,IACX,IACPD,EAAI,EACJC,GAAU,EACVF,KAEEA,IAAM,EAAKJ,KAAKa,SAClBT,EAAI,MAEL,O,+BAIH,OACI,qBAAKd,UAAU,cAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,qBAEjB,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,OAAd,yBACA,oBAAIA,UAAU,OAAd,oCACA,oBAAIA,UAAU,QAAd,SAAwBkB,KAAKN,MAAMC,mBAMrC,sBAAKb,UAAU,iBAAf,UACE,sBAAKA,UAAU,OAAf,UAAsB,cAAC,IAAD,CAAiBE,KAAM,CAAC,MAAO,kBAArD,8BACA,sBAAKF,UAAU,MAAf,UAAqB,cAAC,IAAD,CAAiBE,KAAM,CAAC,MAAO,mBAApD,yCACA,cAAC,EAAD,kB,GA1DKsB,aCRrBrB,IAAQC,IAAIC,IAAKC,IAAKC,KAmBPkB,MAjBf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,OCFc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab4115d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './Contact.scss';\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div className=\"contact\">\r\n            {/* <h1>Connect with me</h1> */}\r\n            <div className=\"contact-links\">\r\n                <a href='https://www.linkedin.com/in/roy-niladri/'>\r\n                    <FontAwesomeIcon icon={['fab', 'linkedin']} />\r\n                </a>\r\n                <a href='https://github.com/royNiladri/'>\r\n                    <FontAwesomeIcon icon={['fab', 'github']} />\r\n                </a>\r\n                <a href='https://www.instagram.com/niladriclicks/'>\r\n                    <FontAwesomeIcon icon={['fab', 'instagram']} />\r\n                </a>\r\n                <a href='https://www.patreon.com/royniladri'>\r\n                    <FontAwesomeIcon icon={['fab', 'patreon']} />\r\n                </a>\r\n                <a href='mailto:reachout@royniladri.dev'>\r\n                    <FontAwesomeIcon icon={['far', 'envelope']} />\r\n                </a>\r\n                <a href='https://twitter.com/roynil92'>\r\n                    <FontAwesomeIcon icon={['fab', 'twitter']} />\r\n                </a>\r\n                <a href='https://www.reddit.com/user/nilroyy'>\r\n                    <FontAwesomeIcon icon={['fab', 'reddit']} />\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport './Banner.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport Contact from '../contact/Contact';\r\nlibrary.add(fab, far, fas);\r\n\r\ninterface IProps {\r\n}\r\ninterface IState {\r\n  textToDisplay?: string;\r\n}\r\n\r\nclass Banner extends Component<IProps, IState> {\r\n  text = [\"Developer\", \"Student\", \"Photographer\", \"Writer\"];\r\n\r\n  interval: any;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { textToDisplay: \"\" }\r\n  }\r\n\r\n  componentWillMount() {\r\n    let i = 0;\r\n    let j = 1;\r\n    let reverse = false;\r\n    let halt = 4;\r\n    this.interval = setInterval(() => {\r\n      let nowText = this.text[i];\r\n      this.setState({ textToDisplay: nowText.substr(0, j) });\r\n\r\n      if (j === nowText.length && halt-- > 0) {\r\n        return\r\n      }\r\n      if (j === nowText.length) {\r\n        reverse = true;\r\n        halt = 4\r\n      }\r\n      j += reverse ? -2 : 1;\r\n      if (j <= 0) {\r\n        j = 1;\r\n        reverse = false;\r\n        i++;\r\n      }\r\n      if (i === this.text.length) {\r\n        i = 0;\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"site-header\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3\">\r\n                <div className=\"profile nilroy\"></div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <h1 className=\"name\">Niladri Roy</h1>\r\n                <h3 className=\"role\" >Lead Software Engineer</h3>\r\n                <h2 className=\"title\" >{this.state.textToDisplay}</h2>\r\n              </div>\r\n              {/* <div className=\"col-md-5 cursive gyan\">\r\n                Living life from<br/> \r\n                one click to the next...\r\n              </div> */}\r\n              <div className=\"col-md-5 intro\">\r\n                <div className=\"work\"><FontAwesomeIcon icon={['fas', 'laptop-house']}/> Informatica | Visa Inc.</div>\r\n                <div className=\"edu\"><FontAwesomeIcon icon={['fas', 'user-graduate']}/> Georgia Tech | Jadavpur University</div>\r\n                <Contact></Contact>\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"row intro\">\r\n              <div className=\"col-md-6 work\">\r\n                <FontAwesomeIcon icon={['fas', 'laptop-house']}/> Informatica | Visa Inc.\r\n              </div>\r\n              <div className=\"col-md-6 edu\">\r\n                <FontAwesomeIcon icon={['fas', 'user-graduate']}/> Georgia Tech | Jadavpur University\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Banner;\r\n","import React from 'react';\r\nimport './App.scss';\r\n// import Contact from './components/contact/Contact';\r\nimport Banner from './components/Banner/Banner';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(fab, far, fas);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" >\r\n      <Banner></Banner>\r\n      {/* <div className=\"container\">\r\n        <Contact></Contact>\r\n        <div className=\"v-spacer\"></div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\"><h2>Work</h2></div>\r\n          <div className=\"col-md-4\"><h2>Study</h2></div>\r\n          <div className=\"col-md-4\"><h2>Life</h2></div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}